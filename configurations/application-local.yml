token:
  expiration: 36000009
  secret: user_name

gateway:
  ip: 127.0.0.1

kafka:
  topic:
    order:
      catalog: 'order-catalog'
      sync: 'order-db-sync'
  broker:
    uri: 'dockerscript-kafka-1:9092'

spring:
  #config-server에 설정을 가져오기 위해 springCloudBus를 이용한다.
  #번거롭게 actuator에서 refresh 호출하는것보다 효율적이다.
  #분산되어있는 시스템끼리 연결해주기 위해 메시지브로커가 필요한데 메시지 브로커 역할로 rabbitMq를 사용한다.
  #config-server의 상태 및 구성에 대한 변경 사항을 연결된 노드에게 broadCast한다.
  rabbitmq:
    host: 127.0.0.1
    port: 5672 #시스템에서 이용하는 포트. 웹뷰 포트는 15672
    username: '{cipher}0ca1a8c1486bb650a37e42c9b938c1357f7c57c4caa4864ff0e4c46d93be3c55' #configServer의 encryptKey로 암호화된 값
    password: '{cipher}0ca1a8c1486bb650a37e42c9b938c1357f7c57c4caa4864ff0e4c46d93be3c55'
  zipkin:
    base-url: 127.0.0.1:9411
    enabled: true
  sleuth:
    sampler:
      probability: 1.0
  kafka:
    consumer:
      group-id: consumer-group-id
  datasource:
    initialization-mode: never

#actuator의 관리 엔드포인트 설정을 나타낸다.
#actuator 관련 설정
#https://docs.spring.io/spring-boot/docs/current/reference/html/actuator.html#actuator.endpoints
#busrefresh: Spring Cloud Bus를 사용하여 설정 변경을 전파한다.
management:
  endpoints:
    web:
      exposure:
        include: refresh, health, beans, busrefresh, info, prometheus, metrics

logging:
  level:
    com.example: info
  file:
    /logs

greeting:
  message: Welcome to the simple E-Commerce.
